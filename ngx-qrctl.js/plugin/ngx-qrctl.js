// Generated by CoffeeScript 1.8.0
(function() {
  var $, jQueryPlugIn, ngxQrCtl,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  jQueryPlugIn = (function() {
    jQueryPlugIn.defaultOptions = {};

    function jQueryPlugIn(element, options) {
      this.element = element;
      this.initialize(options);
    }

    jQueryPlugIn.prototype.initialize = function(options) {
      this.options = options;
    };

    jQueryPlugIn.installAsjQueryPlugIn = function(pluginName) {
      var pluginClass;
      if (pluginName == null) {
        pluginName = this.name;
      }
      pluginClass = this;
      return $.fn[pluginName] = function() {
        var args, options;
        options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if ($.type(options) === "object") {
          options = $.extend(pluginClass.defaultOptions, options || {});
        }
        return this.each(function() {
          var $this, instance, plugin;
          $this = $(this);
          instance = $this.data(pluginName);
          if (instance != null) {
            if ($.type(options) === "string") {
              return instance[options].apply(instance, args);
            } else if (instance.initialize != null) {
              return instance.initialize.apply(instance, [options].concat(args));
            }
          } else {
            plugin = (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(pluginClass, [$this, options].concat(__slice.call(args)), function(){});
            $this.data(pluginName, plugin);
            $this.addClass(pluginName);
            $this.bind("destroyed." + pluginName, function() {
              $this.removeData(pluginName);
              $this.removeClass(pluginName);
              $this.unbind(pluginName);
              return plugin.destructor();
            });
            return plugin;
          }
        });
      };
    };

    return jQueryPlugIn;

  })();

  ngxQrCtl = (function(_super) {
    var Socket;

    __extends(ngxQrCtl, _super);

    Socket = 0;

    ngxQrCtl.defaultOptions = {
      position: 'bottom',
      width: 50,
      height: 50,
      color: "#3a3",
      surl: 'http://ngx.matthewlab.com/',
      debug: false
    };

    function ngxQrCtl(element, options) {
      var ext;
      this.element = element;
      ngxQrCtl.__super__.constructor.call(this, this.element, options);
      ext = this;
      $.getScript(this.options.surl + "socket.io/socket.io.js", function(data, textStatus, jqxhr) {
        Socket = io.connect(options.surl);
        Socket.emit('join', 'site');
        Socket.on('join ok', function(siteID) {
          ext.element.qrcode({
            "width": ext.options.width,
            "height": ext.options.height,
            "color": ext.options.color,
            "text": "http://ngx.matthewlab.com/c/" + encodeURIComponent(siteID)
          });
        });
        Socket.on('move', function(event) {
          ext.element.trigger('move', event);
        });
      });
    }

    ngxQrCtl.prototype.initialize = function(options) {
      this.options = options;
      ngxQrCtl.__super__.initialize.call(this, this.options);
    };

    return ngxQrCtl;

  })(jQueryPlugIn);

  ngxQrCtl.installAsjQueryPlugIn();

}).call(this);
